/*!
 @header VocService.h

 @brief This header file declares the SDK objects such as content item and it's specializations, file, category and source. This header file also declares the filter for retrieving those objects and the listener for the object set changes.

 @copyright (c)2015,2016,2017 Akamai Technologies, Inc. All Rights Reserved. Reproduction in whole or in part in any form or medium without express written permission is prohibited.
 */

#ifndef VocSdk_VocItem_h
#define VocSdk_VocItem_h

#import <VocSdk/VocSdkBase.h>

@class VocObjFilter;
@class VocItemFilter;
@class VocVideoFilter;
@class VocItemCategoryFilter;
@class VocItemSourceFilter;

@protocol VocObj;
@protocol VocItem;
@protocol VocItemVideo;
@protocol VocItemHLSVideo;
@protocol VocItemDASHVideo;
@protocol VocFile;
@protocol VocItemCategory;
@protocol VocItemSource;
@protocol VocObjSetChangeListener;
@protocol VocObjSet;
@protocol VocService;



/*!
   @protocol VocObj

   @brief Base class for item, category and source.
 */
@protocol VocObj <NSObject>

/*! @brief Type of Object whether it is item, category or source. */
@property (readonly,assign,nonatomic)			VOCObjType		objType;

/*! @brief Unique Id generated by the SDK. */
@property (readonly,nonnull,strong,nonatomic)	NSString		*objId;

/*! @brief Represents whether the object is deleted. */
@property (readonly,assign,nonatomic)			BOOL			deleted;

/*! @brief The consumer of SDK can use this property to store an object. */
@property (readwrite,nullable,strong,nonatomic)	id				userInfo;			// only kept in memory.

/*!
   @brief Client-specified information pertinent to the item, synchronized with the database.

   @discussion Needs to conform to <NSCoding> to read/write values from the database. The standard NSData, NSString, NSDate, NSURL, etc. and aggregates such as NSArray, NSDictionary types already conform. Setting this value (eventually?) synchronizes to the database.
 */
@property (readwrite,nullable,strong,nonatomic)	id				persistentUserInfo;

@end


/*!
 @protocol VocItem

 @brief Represents a content item.
 */
@protocol VocItem <VocObj>
/*! @brief Unique ID generated for the content by the PCD Server */
@property (readonly,nonnull,strong,nonatomic)	NSString			*uniqueId;

/*!
   @brief Unique ID assigned for the content during ingest. If SDK has PCD capabilities, this property represents the content_unique_id during ingest.
 */
@property (readonly,nonnull,strong,nonatomic)	NSString			*contentId;

/*!
   @brief The primary aim for the SDK is to cache the item. This property indicates the downloading state of the item. For example: discovered, queued, downloading, idle, cached, failed etc.
 */
@property (readonly,assign,nonatomic)			VOCItemState		state;

/*! @brief Title of the content item. */
@property (readonly,nullable,strong,nonatomic)	NSString			*title;

/*! @brief Summary of the content item. */
@property (readonly,nullable,strong,nonatomic)	NSString			*summary;

/*!
   @brief A content item can have multiple content url associated with it. url property represents the url that is selected for downloading.
 */
@property (readonly,nullable,strong,nonatomic)	NSURL               *url;

/*!
   @brief A content item can have multiple content url associated with it. Only one URL is selected for download and file property represents the file that URL downloads.
 */
@property (readonly,nonnull,strong,nonatomic)	id<VocFile>			file;

/*!
   @brief The local path to access the file represented by file property. This will nil if the content item is not cached.
 */
@property (readonly,nullable,strong,nonatomic)	NSString			*localPath;

/*!
   @brief A content item can have multiple content url associated with it. size property represents the size associated with the url that is selected for downloading.
 */
@property (readonly,assign,nonatomic)			int64_t				size;

/*! @brief Size in bytes for all things stored in cache belonging to this content item
 */
@property (readonly,assign,nonatomic)			int64_t				bytesDownloaded;

/*! @brief The provider/source of the content item. */
@property (readonly,nullable,strong,nonatomic)	id<VocItemSource>	source;

/*! @brief The categories associated with the content item. */
@property (readonly,nullable,strong,nonatomic)	NSSet				*categories;

/*!
   @brief Most of the media content (eg: video, audio) has a thumbnail associated. This property points to the thumbnail file associated with the content item. 
 */
@property (readonly,nullable,strong,nonatomic)	id<VocFile>			thumbnail;


#pragma mark -- Download --
/*!
   @brief Each item can have separate download behavior and it takes value from VOCItemDownloadBehavior.

   @discussion Default value of the property is VOCItemDownloadSdkBehavior i.e. it will follow the item download  behavior set on the sdk.

   @see VocConfig::itemDownloadBehavior
 */
@property (readwrite,assign,nonatomic)			VOCItemDownloadBehavior		downloadBehavior;

/*!
   @brief Each file associated with the item might have a quality and the preferredQuality decides which file to download based on quality.

   @discussion Default value of the property is VOCQualitySelectionSdkBehavior i.e. it will follow the preferred quality set on the sdk. See VocConfig::preferredQuality Override the preferred quality of sdk by setting this property. preferredQuality takes value from VOCQualitySelectionSdkBehavior to VOCQualitySelectionHigh.
 */
@property (readwrite,assign,nonatomic)			NSInteger		preferredQuality;

/*!
   @brief During ingest, the content item can be designated with priority. The download queue is sorted in descending order based on the priority.
 */
@property (readonly,assign,nonatomic)			NSInteger			priority;

/*! @brief Mark item to be downloaded as soon as possible. */
@property (readwrite,assign,nonatomic)			BOOL				prioritizedDownload;

/*!
   @brief Paused item is that item whose download has been paused explicitly by the user. Paused item can be resumed to download only by the user. Paused item can still be evicted by the purging mechanism.
 */
@property (readonly,assign,nonatomic)			BOOL				paused;

/*! @brief Download Start time. This is when the item was first moved to
   VOCItemState::VOCItemDownloading.
 */
@property (readonly,nullable,strong,nonatomic)	NSDate				*downloadStartTime;

/*! @brief Download Finish time. This is when the item was first moved to
   VOCItemState::VOCItemCached.
 */
@property (readonly,nullable,strong,nonatomic)	NSDate				*downloadFinishedTime;

/*! @brief Download Queued time. This is when the item was first moved to VOCItemState::VOCItemQueued.
 */
@property (readonly,nullable,strong,nonatomic)	NSDate				*downloadQueuedTime;

/*!
   @brief If download stops or fails for some reason this property will hold and error object with the reason for the failure.

   @discussion Property will be
       - non nill in states VocItemIdle, VocItemFailed.
       - nil in all other states.
 */
@property (readonly,nullable,nonatomic)			NSError						*downloadError;

#pragma mark -- Delete --
/*!
 @brief Item's locked stated.

 @see VocItem::lock VocItem::unlock
 */
@property (readonly,nonatomic)					BOOL				locked;

/*!
   @brief Use this method to signal SDK that the item should not be evicted from the cache or modified in a way that will prevent the user from consuming/viewing it.

   @discussion It is not recommended to lock more than couple of items since this will lock items in cache and less space will be available for pre-fetching. Use this method for items that the user started interacting with. As soon as possible unlock the item.

    @see VocServiceDelegate::itemsEvicted:
 */
- (BOOL)lock;

/*!
   @brief Use this method to unlock an item that was previously locked.
   Calling it on unlocked item has no effect.
 */
- (void)unlock;

/*!
   @brief Delete the item from cache.
 */
- (void)deleteItem;

/*!
   @brief Delete content in the file system but not the metadata.

   @param deleteThumbnail If NO, delete all files associated with the item except thumbnail
 */
- (void)deleteFiles:(BOOL)deleteThumbnail;

/*!
   @brief Delete content in the file system but not the metadata.

   @param deleteThumbnail If NO, delete all files associated with the item except thumbnail
   @param completion The completion block executes once deletion is completed. If deletion fails, it returns non nil error.
 */
- (void)deleteFilesWithCompletion:(BOOL)deleteThumbnail
		 completion:(nullable void (^)(NSError * __nullable))completion;


#pragma mark -- Extra Files --
/*!
   @brief Load thumbnails.

   @param completion Completion returns a set of thumbnails ingested as part of file group with type - VocFileGroupType::VocThumbnailType and the main thumbnail.
 */
- (void)thumbnailsWithCompletion:(nonnull void (^)(NSSet<id<VocFile>>* __nullable thumbnails))completion;


#pragma mark -- Ads --
/*!
   @brief The type of advertisement associated with this content item. For example: IMA, Millenial etc.
 */
@property (readonly,assign,nonatomic)			VOCAdServerType		adServerType;

/*!
   @brief Each content can be associated with an adverstisement. This property points to an adverstisement URL.
 */
@property (readonly,nullable,strong,nonatomic)  NSURL               *adServerURL;

/*!
   @brief Advertisement URL for this content item.

   @param adUrl Advertisement URL that got played.
   @param clicked If user has clicked the advertisement.
   @param duration Duration of the ad video.
   @param durationPlayed Duration of ad that user watched.
   @param whenPlayed time and data at which the ad was watched.
 */
- (void)recordAdImpression:(nonnull NSString*)adUrl
				   clicked:(BOOL)clicked
				  duration:(NSTimeInterval)duration
			durationPlayed:(NSTimeInterval)durationPlayed
				whenPlayed:(nonnull NSDate*)whenPlayed;


#pragma mark -- Migration --
/*!
   @brief This property notifies the user whether the Item is imported from the client application to the SDK.

   @discussion For contents which are downloaded from the server will have state called 'VocItemStateNonMigrated'. For those downloaded contents imported from client Application to sdk will have state 'VocItemStateNewlyMigrated' initially, and once the details are updated by server the state will be changed to 'VocItemStateMigratedAndUpdated'
 */
@property (readonly,assign,nonatomic)			VOCItemMigrationState		migrationState;


#pragma mark -- Others --
/*! @brief The date on which the content was published on the web. */
@property (readonly,nonnull,strong,nonatomic)	NSDate				*creationDate;

/*!
   @brief A string that is ingested by the customer and not used in SDK.
   This is generally used to pass additional item specific information.
 */
@property (readwrite,nullable,strong,nonatomic)	NSString			*sdkMetadataPassthrough;

/*! @brief Mark item as liked (+1), disliked (-1) or neutral (0) */
@property (readwrite,assign,nonatomic)			NSInteger			like;

/*! @brief Saved items are not removed from cache and stay there until the user unsaves them or deletes them. */
@property (readwrite,assign,nonatomic)			BOOL				saved;

/*! @brief Share Url of the content item. */
@property (readonly,nullable,strong,nonatomic)  NSURL               *shareURL;

/*! @deprecated: You can use the state property to verify if the item is in VOCItemState : VOCItemDownloading. */
@property (readonly,assign,nonatomic)			BOOL			 	downloadingNow __attribute__((deprecated));



#pragma mark -- MAP SDK --
/*!
   @brief Content items can have a parent-child relationship. This property represents the list of parent uniqueId's.
 */
@property (readwrite,nullable,strong,nonatomic) NSString            *parentIDs;

/*!
   @brief Content items can have a parent-child relationship. This property represents the list of child uniqueId's.
 */
@property (readonly,nullable,strong,nonatomic)  NSString            *childIDs;

/*! @brief Response header received as part of content item download request. */
@property (readonly,nullable,strong,nonatomic)  NSString            *responseHeaders;

/*!
   @brief Content item could have an expiration and SDK refreshes the content if it is about to get expired. This property points to the last refreshed date of the content.
 */
@property (readonly,nullable,strong,nonatomic)  NSDate              *lastRefreshDate;

/*!
   @brief Content item could have an expiration and SDK refreshes the content if it is about to get expired. This property represents the difference between the expiration date of the content and refresh date of the content.

   @discussion The value will be zero, if lastRefreshDate is greater than expiration date
 */
@property (readonly,assign,nonatomic)           NSUInteger          secondsValidAfterRefresh;

/*!
   @brief  MAP SDK maintains a universal cache.

   @discussion Even if the  requested content url is not ingested by customer, the SDK can still download and keep it in the cache. If YES, property indicates that the item is a non ingested content.
 */
@property (readonly,assign,nonatomic)			BOOL				cachedAdHoc;

/*! @brief The last timestamp on which the item was requested by the client and the SDK served the content from the cache. */
@property (readonly,nullable,strong,nonatomic)	NSDate				*cacheLastUsed;

/*! @brief The number of times SDK served the content to the client from the SDK cache. */
@property (readonly,nullable,strong,nonatomic)	NSNumber			*cacheUsedCount;


@end


/*!
   @protocol VocItemVideo

   @brief Represents a Video item.
 */
@protocol VocItemVideo <VocItem>

/*!
   @brief The client can bookmark a particular time of the video.

   @description This property is usually used when user partially watches a video and the consumer can record that time stamp. When user access the same video next time, the client can resume playing from the bookmark next time.
 */
@property (readwrite,assign,nonatomic)			NSTimeInterval		bookmark;

/*! @brief Duration of the video. */
@property (readwrite,assign,nonatomic)			NSTimeInterval		duration;

/*!
   @brief The number of times user has viewed the video completely. This property is managed by the client.
 */
@property (readwrite,assign,nonatomic)			BOOL                viewedCompletely;

/*!
   @brief The number of times user has viewed the video(partially/completely). This property is managed by the client.
 */
@property (readwrite,assign,nonatomic)			NSInteger			views;

/*!
   @brief Load subtitles.

   @param completion The completion block returns a set of subtitles ingested as part of file group with type - VocFileGroupType::VocSubtitleType.
 */
- (void)subtitlesWithCompletion:(nonnull void (^)(NSSet<id<VocFile>>* __nullable subtitles))completion;

/*!
   @brief PCD SDK needs to track the consumption of video content.

   @discussion It is required by all of the  SDK consumers that use video content to mark the consumption.

   @param when Date on which the video was consumed
   @param startingPoint From what time the video started watching.
   @param endingPoint Finish time for video watching.
 */
- (void)recordConsumption:(nonnull NSDate*)when
			   startingAt:(NSTimeInterval)startingPoint
				 endingAt:(NSTimeInterval)endingPoint;

@end


/*!
   @protocol VocItemHLSVideo

   @brief Represents HLS video item.
 */
@protocol VocItemHLSVideo <VocItemVideo>

/*!
   @brief For HLS content, SDK sets up a localhost server. This property points to the relative path that needs to be added to localhost server url for accessing the master m3u8 file.
 */
@property (readonly,nullable,strong,nonatomic)	NSString 	*hlsServerRelativePath;

/*!
   @brief For HLS content, SDK sets up a localhost server. This property points to the relative path that needs to be added to localhost server url for accessing the segment index file.
 */
@property (readonly,nullable,strong,nonatomic)  NSString 	*hlsIndexRelativePath;

/*!
   @brief  Key server URL.

   @discussion May be nil (no DRM), or a value that can be used to identify the type of DRM used for this particular item. Unused by VOC SDK; simply passed from the server.
 */
@property (readonly,nullable,strong,nonatomic)  NSURL	*keyServerURL;

@end

/*!
   @protocol VocItemDASHVideo

   @brief Represents DASH video item.
 */
@protocol VocItemDASHVideo <VocItemVideo>

/*!
  @brief This property points to the cached path to the DASH video content.
 */
@property (readonly,nullable,strong,nonatomic)	NSString	*dashCachedPath;

@end


/*!
 @protocol VocFile

 @brief Represents a file.
 */
@protocol VocFile <NSObject>

/*!
   @brief The primary aim for the SDK is to cache the right file. This property indicates the downloading state of the file.
 */
@property (readonly,assign,nonatomic)			VOCFileState				state;

/*!
   @brief The url that will be used to download the file.
 */
@property (readonly,nullable,strong,nonatomic)	NSURL						*url;

/*!
   @brief The file mimetype provided during ingest. SDK does not change it.
 */
@property (readonly,nullable,strong,nonatomic)	NSString					*mimeType;

/*!
   @brief In addition to main files, SDK can download file groups such as subtitles and thumbnails. This property is used to identify which file group the file belongs to. The type information is provided during content ingest.
 */
@property (readonly,assign,nonatomic)			VocFileGroupType			fileGroupType;

/*!
   @brief The file size provided during ingest. Except for HLS and DASH content, the size will be corrected during download.
 */
@property (readonly,assign,nonatomic)			int64_t						size;

/*!
   @brief Size in bytes for the file stored in cache. This property can be used to track the download progress while the file is getting downloaded.
 */
@property (readonly,assign,nonatomic)			int64_t						bytesDownloaded;

/*!
   @brief local device path to access the file.
 */
@property (readonly,nullable,strong,nonatomic)	NSString					*localPath;

/*!
   @brief The file quality provided during ingest. It ranges from 0 to 10.
 */
@property (readonly,assign,nonatomic)			int16_t						quality;

/*!
   @brief The file attributes provided during ingest.
 */
@property (readonly,nullable,strong,nonatomic)	NSDictionary<NSString*, id>	*attributes;

/*!
   @brief During ingest the customer can indicate whether a particular file needs to be autodownloaded. This is applicable only for files other than VocMainContentType files and main thumbnail.
 */
@property (readwrite,assign,nonatomic)			BOOL						autoDownload;

/*!
   @brief Identify the type of file.

   @return VocFileType SDK assigns a type for each file internally. This type needs to be known by the client because main file can have sub files. For example: HLS has main m3u8 file, index file, segments, keys etc.
 */
- (VocFileType) getFileType;

@end


/*!
 @protocol VocItemCategory

 @brief Represents a category.

 @discussion Items can be classified in zero or more categories. A category can have child category. Consumer of the SDK can also add a tag which will be treated as category.
 */
@protocol VocItemCategory <VocObj>

/*!
   @brief The unique name of the category. Not for UI.
 */
@property (readonly,nonnull,nonatomic)	NSString		*name;

/*!
   @brief The name of the category suitable for UI.
 */
@property (readonly,nonnull,nonatomic)	NSString		*displayName;

/*!
   @brief Is consumer of the SDK has subscribed to this category.

   @discussion Content items that are associated with subscribed categories will be auto downloaded. By default all categories are initially subscribed. The consumer of the SDK can subscribe or unsubscribe to a category by modifying this property.
 */
@property (readwrite,assign,nonatomic)	BOOL			subscribed;

/*!
   Alias for subscribed
 */
@property (readwrite,assign,nonatomic)	BOOL			selected;

/*!
   @brief Creates a new child category.Aliases for child category is subcategory.

   @param newChildCatName The new child category name that needs to be added.
 */
- (void) addNewChildCategory:(nonnull NSString*)newChildCatName;

/*!
   @brief Remove a child category if exists.

   @param catToRemove Category that needs to be removed.
 */
- (void) removeChildCategory:(nonnull id<VocItemCategory>)catToRemove;

@end




/*!
    @protocol VocItemSource

    @brief Represents the source where the item originated.
 */
@protocol VocItemSource <VocObj>

/*! @brief The unique name of the source. Not for UI. */
@property (readonly,nonnull,nonatomic)	NSString		*name;

/*! @brief The name of the source suitable for UI. */
@property (readonly,nonnull,nonatomic)	NSString		*displayName;

/*!
    @brief Only items for subscribed sources will be auto downloaded. By default all known sources are initially subscribed.
 */
@property (readwrite,assign,nonatomic)	BOOL			subscribed;

/*! @brief Description of the source suitable for UI. */
@property (readonly,nonnull,nonatomic)	NSString		*providerDescription;

/*! @brief Language that source supports. */
@property (readonly,nonnull,nonatomic)	NSString		*language;

@end


#pragma mark -- Content Filters --
/*!
   @interface VocObjFilter

   @brief Base Filter that can be applied to retrieve Content, Categories and Source.
 */
@interface VocObjFilter : NSObject

/*! @brief init method is unavailable. */
- (nullable instancetype)init NS_UNAVAILABLE;

/*! @brief The type of object that needs to be retrieved from SDK. */
@property (readonly,assign,nonatomic)			VOCObjType	objType;

/*! @brief The sort order of the retrieved objects. */
@property (readonly,nullable,strong,nonatomic)	NSArray		*sortDescriptors;

@end


/*!
   @interface VocItemFilter

   @brief Specialized Filter for content object type (VOCObjTypeItem).
 */
@interface VocItemFilter : VocObjFilter

/*!
   @brief Creates a filter that retrieves all the content items.

   @param sortDescriptors Array of NSSortDescriptor.

   @return A filter that retrieves all the content items
 */
+ (nullable instancetype)allWithSort:(nullable NSArray*)sortDescriptors;

/*!
   @brief Creates a filter that retrieves all the partially downloaded items.

   @param sortDescriptors Array of NSSortDescriptor.

   @return A filter that retrieves all the partially downloaded items.
 */
+ (nullable instancetype)itemsPartiallyDownloadedWithSort:(nullable NSArray*)sortDescriptors;

/*!
   @brief Creates a filter that retrieves all the cached content items.

   @param sortDescriptors Array of NSSortDescriptor.

   @return A filter that retrieves all the cached content items.
 */
+ (nullable instancetype)itemsDownloadedWithSort:(nullable NSArray*)sortDescriptors;

/*!
   @brief Creates a filter that retrieves all the content items with the state VOCItemDiscovered..

   @param sortDescriptors Array of NSSortDescriptor.

   @return A filter that retrieves all the content items with the state VOCItemDiscovered.
 */
+ (nullable instancetype)itemsDiscoveredWithSort:(nullable NSArray*)sortDescriptors;

/*!
   @brief Creates a filter that retrieves all the content items with the state VOCItemQueued.

   @param sortDescriptors Array of NSSortDescriptor.

   @return A filter that retrieves all the content items with the state VOCItemQueued.
 */
+ (nullable instancetype)itemsQueuedWithSort:(nullable NSArray*)sortDescriptors;

/*!
   @brief Creates a filter that retrieves all the content items with the state VOCItemDownloading.

   @param sortDescriptors Array of NSSortDescriptor.

   @return A filter that retrieves all the content items with the state VOCItemDownloading.
 */
+ (nullable instancetype)itemsDownloadingWithSort:(nullable NSArray*)sortDescriptors;

/*!
   @brief Creates a filter that retrieves all the content items with the state VOCItemIdle.

   @param sortDescriptors Array of NSSortDescriptor.

   @return A filter that retrieves all the content items with the state VOCItemIdle.
 */
+ (nullable instancetype)itemsIdleWithSort:(nullable NSArray*)sortDescriptors;

/*!
   @brief Creates a filter that retrieves all the content items with the state VOCItemPaused.

   @param sortDescriptors Array of NSSortDescriptor.

   @return A filter that retrieves all the content items with the state VOCItemPaused.
 */
+ (nullable instancetype)itemsPausedWithSort:(nullable NSArray*)sortDescriptors;

/*!
   @brief Creates a filter that retrieves all the content items with the state VOCItemFailed.

   @param sortDescriptors Array of NSSortDescriptor.

   @return VocItemFilter Returns a filter that retrieves all the content items with the state VOCItemFailed.
 */
+ (nullable instancetype)itemsFailedWithSort:(nullable NSArray*)sortDescriptors;

/*!
   @brief Creates a filter that retrieves all the content items that matches the provided states.

   @param states Set of VOCItemState.
   @param sortDescriptors Array of NSSortDescriptor.

   @return VocItemFilter Returns a filter that retrieves all the content items that matches the provided states.
 */
+ (nullable instancetype)itemsInStates:(nonnull NSSet<NSNumber*>*)states
								  sort:(nullable NSArray<NSSortDescriptor*>*)sortDescriptors;

/*!
   @brief Creates a filter that retrieves all the content items that are associated with provided category.

   @param category Category is a filter param and this API looks for item that belongs to this category.
   @param sortDescriptors Array of NSSortDescriptor.

   @return VocItemFilter Returns a filter that retrieves all the content items that are associated with provided category.
 */
+ (nullable instancetype)itemsWithCategory:(nonnull id<VocItemCategory>)category sortDescriptors:(nullable NSArray*)sortDescriptors;

/*!
   @brief Creates a filter that retrieves all the content items that exactly matches the given content ids and source.

   @param contentIds Content ids are a filter param and this API looks for item that matches the content id.
   @param sourceName Source name is a filter param and this API looks for item that belongs to this VocItemSource.
   @param sortDescriptors Array of NSSortDescriptor.

   @return VocItemFilter Returns a filter that retrieves all the content items that exactly matches the given content ids and source.
 */
+ (nullable instancetype)itemsWithContentIds:(nonnull NSSet<NSString*>*)contentIds sourceName:(nullable NSString *)sourceName sortDescriptors:(nullable NSArray*)sortDescriptors;

/*!
   @brief Creates a filter that retrieves all the content items that are cached and are associated with given category.

   @param category Category is a filter param and this API looks for item that belongs to this category.
   @param sortDescriptors Array of NSSortDescriptor.

   @return VocItemFilter Returns a filter that retrieves all the content items that are cached and are associated with given category.
 */
+ (nullable instancetype)itemsDownloadedWithCategory:(nonnull id<VocItemCategory>)category sortDescriptors:(nullable NSArray*)sortDescriptors;

/*!
 @brief Creates a filter that retrieves all the content items that are in any state from the set of states and are associated with given category.

 @param states Set of item states.
 @param category Category is a filter param and this API looks for item that belongs to this category.
 @param sortDescriptors Array of NSSortDescriptor.

 @return VocItemFilter Returns a filter that retrieves all the content items that are in any state from the set of states and are associated with given category.
 */
+ (nullable instancetype)itemsInStates:(nonnull NSSet<NSNumber*>*)states
						  withCategory:(nonnull id<VocItemCategory>)category
					   sortDescriptors:(nullable NSArray*)sortDescriptors;

/*!
   @brief Creates a filter that retrieves all the saved content items.

   @param sortDescriptors Array of NSSortDescriptor.

   @return VocItemFilter Returns a filter that retrieves all the saved content items.

   @see VocItem::saved
 */
+ (nullable instancetype)itemsSavedWithSort:(nullable NSArray*)sortDescriptors;

/*!
   @brief Creates a filter that retrieves all the content items that are cached and are not marked as viewed by the client.

   @param sortDescriptors Array of NSSortDescriptor.

   @return VocItemFilter Returns a filter that retrieves all the content items that are cached and are not marked as viewed by the client.
 */
+ (nullable instancetype)itemsDownloadedNotViewedWithSort:(nullable NSArray*)sortDescriptors;

/*!
 @brief Creates a filter that retrieves all the content items that are in any state from the set of states and are not marked as viewed by the client.

 @param states Set of item states.
 @param sortDescriptors Array of NSSortDescriptor.

 @return VocItemFilter Returns a filter that retrieves all the content items that are in any state from the set of states and are not marked as viewed by the client.
 */
+ (nullable instancetype)itemsInStates:(nonnull NSSet<NSNumber*>*)states
					   notViewedWithSort:(nullable NSArray*)sortDescriptors;

@end


/*!
   @interface VocVideoFilter

   @brief Specialized Filter for video content.
 */
@interface VocVideoFilter : VocObjFilter

/*!
  @brief Creates a filter that retrieves all the video items.

  @param sortDescriptors Array of NSSortDescriptor.

  @return A filter that retrieves all the video items
*/
+ (nullable instancetype)allWithSort:(nullable NSArray*)sortDescriptors;

/*!
   @brief Creates a filter that retrieves all the partially downloaded video items.

   @param sortDescriptors Array of NSSortDescriptor.

   @return A filter that retrieves all the partially downloaded video items.
 */
+ (nullable instancetype)videosPartiallyDownloadedWithSort:(nullable NSArray*)sortDescriptors;

/*!
   @brief Creates a filter that retrieves all the cached video items.

   @param sortDescriptors Array of NSSortDescriptor.

   @return A filter that retrieves all the cached video items.
 */
+ (nullable instancetype)videosDownloadedWithSort:(nullable NSArray*)sortDescriptors;


/*!
   @brief Creates a filter that retrieves all the video items with the state VOCItemDiscovered.

   @param sortDescriptors Array of NSSortDescriptor.

   @return A filter that retrieves all the video items with the state VOCItemDiscovered.
 */
+ (nullable instancetype)videosDiscoveredWithSort:(nullable NSArray*)sortDescriptors;


/*!
   @brief Creates a filter that retrieves all the video items with the state VOCItemQueued.

   @param sortDescriptors Array of NSSortDescriptor.

   @return A filter that retrieves all the video items with the state VOCItemQueued.
 */
+ (nullable instancetype)videosQueuedWithSort:(nullable NSArray*)sortDescriptors;

/*!
   @brief Creates a filter that retrieves all the video items with the state VOCItemDownloading.

   @param sortDescriptors Array of NSSortDescriptor.

   @return A filter that retrieves all the video items with the state VOCItemDownloading.
 */
+ (nullable instancetype)videosDownloadingWithSort:(nullable NSArray*)sortDescriptors;


/*!
   @brief Creates a filter that retrieves all the video items with the state VOCItemIdle.

   @param sortDescriptors Array of NSSortDescriptor.

   @return A filter that retrieves all the video items with the state VOCItemIdle.
 */
+ (nullable instancetype)videosIdleWithSort:(nullable NSArray*)sortDescriptors;

/*!
   @brief Creates a filter that retrieves all the video items with the state VOCItemPaused.

   @param sortDescriptors Array of NSSortDescriptor.

   @return A filter that retrieves all the video items with the state VOCItemPaused.
 */
+ (nullable instancetype)videosPausedWithSort:(nullable NSArray*)sortDescriptors;

/*!
   @brief Creates a filter that retrieves all the video items with the state VOCItemFailed.

   @param sortDescriptors Array of NSSortDescriptor.

   @return A filter that retrieves all the video items with the state VOCItemFailed.
 */
+ (nullable instancetype)videosFailedWithSort:(nullable NSArray*)sortDescriptors;

/*!
   @brief Creates a filter that retrieves all the video items that matches the provided states.

   @param states Set of item states.
   @param sortDescriptors Array of NSSortDescriptor.

   @return A filter that retrieves all the video items that matches the provided states.

   @see VOCItemState
 */
+ (nullable instancetype)videosInStates:(nonnull NSSet<NSNumber*>*)states
								  sort:(nullable NSArray<NSSortDescriptor*>*)sortDescriptors;

/*!
   @brief Creates a filter that retrieves all the video items that are associated with provided category.

   @param category Category is a filter param and this API looks for item that belongs to this category.
   @param sortDescriptors Array of NSSortDescriptor.

   @return VocItemFilter Returns a filter that retrieves all the video items that are associated with provided category.
 */
+ (nullable instancetype)videosWithCategory:(nonnull id<VocItemCategory>)category sortDescriptors:(nullable NSArray*)sortDescriptors;

/*!
   @brief Creates a filter that retrieves all the video items that are cached and are associated with given category.

   @param category Category is a filter param and this API looks for item that belongs to this category.
   @param sortDescriptors Array of NSSortDescriptor.

   @return VocItemFilter Returns a filter that retrieves all the video items that are cached and are associated with given category.
 */
+ (nullable instancetype)videosDownloadedWithCategory:(nonnull id<VocItemCategory>)category sortDescriptors:(nullable NSArray*)sortDescriptors;

/*!
   @brief Creates a filter that retrieves all the video items that are in state VOCItemCached or VOCItemDownloading and are associated with given category.

   @param category Category is a filter param and this API looks for item that belongs to this category.
   @param sortDescriptors Array of NSSortDescriptor.

   @return VocItemFilter Returns a filter that retrieves all the video items that are in state VOCItemCached or VOCItemDownloading and are associated with given category.
 */
+ (nullable instancetype)videosDownloadedOrDownloadingWithCategory:(nonnull id<VocItemCategory>)category
												   sortDescriptors:(nullable NSArray*)sortDescriptors;

/*!
 @brief Creates a filter that retrieves all the video items that are in any state from the set of states and are associated with given category.

 @param states Set of item states.
 @param category Category is a filter param and this API looks for item that belongs to this category.
 @param sortDescriptors Array of NSSortDescriptor.

 @return VocItemFilter Returns a filter that retrieves all the video items that are any state from the set of states and are associated with given category.
 */
+ (nullable instancetype)videosInStates:(nonnull NSSet<NSNumber*>*)states
						   withCategory:(nonnull id<VocItemCategory>)category
						sortDescriptors:(nullable NSArray*)sortDescriptors;

/*!
   @brief Creates a filter that retrieves all the saved video items.

   @param sortDescriptors Array of NSSortDescriptor.

   @return VocItemFilter Returns a filter that retrieves all the saved video items.

   @see VocItem::saved
 */
+ (nullable instancetype)videosSavedWithSort:(nullable NSArray*)sortDescriptors;

/*!
   @brief Creates a filter that retrieves all the video items that are cached and are not marked as viewed by the client.

   @param sortDescriptors Array of NSSortDescriptor.

   @return VocItemFilter Returns a filter that retrieves all the video items that are cached and are not marked as viewed by the client.
 */
+ (nullable instancetype)videosDownloadedNotViewedWithSort:(nullable NSArray*)sortDescriptors;

/*!
 @brief Creates a filter that retrieves all the video items that are in any state from the set of states and are not marked as viewed by the client.

 @param states Set of item states.
 @param sortDescriptors Array of NSSortDescriptor.

 @return VocItemFilter Returns a filter that retrieves all the video items that are in any state from the set of states and are not marked as viewed by the client.
 */
+ (nullable instancetype)videosInStates:(nonnull NSSet<NSNumber*>*)states
					  notViewedWithSort:(nullable NSArray*)sortDescriptors;

@end


/*!
   @interface VocItemCategoryFilter

   @brief Specialized Filter for category object type (VOCObjTypeItemCategory).
 */
@interface VocItemCategoryFilter : VocObjFilter


/*!
  @brief Creates a filter that retrieves all the category.

  @param sortDescriptors Array of NSSortDescriptor.

  @return VocItemFilter Returns a filter that retrieves all the category.
*/
+ (nullable instancetype)allWithSort:(nullable NSArray*)sortDescriptors;

/*!
   @brief Creates a filter that retrieves all the selected/subscribed categories.

   @param sortDescriptors Array of NSSortDescriptor.

   @return VocItemFilter Returns a filter that retrieves all the selected/subscribed categories.
 */
+ (nullable instancetype)categoriesSelected:(nullable NSArray*)sortDescriptors;

/*!
   @brief Creates a filter that retrieves all the selected/subscribed categories and has got cached content.

   @param sortDescriptors Array of NSSortDescriptor.

   @return VocItemFilter Returns a filter that retrieves all the selected/subscribed categories and has got cached content.
 */
+ (nullable instancetype)categoriesSelectedWithContent:(nullable NSArray *)sortDescriptors;

/*!
   @brief Creates a filter that retrieves all the subcategories where the client has subscribed and matching the search string.

   @param parentCatName String of parent category.
   @param search String to search in parent categories.

   @return VocItemFilter Returns a filter that retrieves all the subcategories where the client has subscribed that match the search string.
 */
+ (nullable instancetype)subCategories:(nonnull NSString*)parentCatName SearchField:(nullable NSString*)search;

/*!
   @brief Creates a filter that retrieves all the subCategories with given search string.

   @param search String for which to search.

   @return VocItemFilter Returns a filter that retrieves all the subCategories with given search string.
 */
+ (nullable instancetype)suggestions:(nullable NSString*) search;

@end


/*!
   @interface VocObjSetChangeListener

   @brief Specialized Filter for source object type (VOCObjTypeItemSource).
 */
@interface VocItemSourceFilter : VocObjFilter

/*!
  @brief Creates a filter that retrieves all the source.

  @param sortDescriptors Array of NSSortDescriptor.

  @return VocItemFilter Returns a filter that retrieves all the source.
*/
+ (nullable instancetype)allWithSort:(nullable NSArray*)sortDescriptors;

@end


#pragma mark -- Listener --
/*!
   @protocol VocObjSetChangeListener

   @brief Listener for tracking changes on a set of VocObj.

   @discussion The consumer of the SDK can
	  1. Retrieve a VocObjSet of content using query methods defined in VocService for example: VocService::getItemWithId:completion.
      2. Implement VocObjSetChangeListener protocol.
      3. Add the implementation as the listener for the VocObjSet.
 */
@protocol VocObjSetChangeListener <NSObject>

@optional

/*!
   This call back will notify the listener that there is a change on the listening object after the change is applied.
   @param added objects in the VocObjSet that got added after last notification.
   @param updated objects in the VocObjSet that got updated after last notification.
   @param removed objects in the VocObjSet that got removed after last notification.
   @param objectsAfterChanges objects after the new changes are made on the set.
 **/
- (void) vocService:(nonnull id<VocService>)vocService objSetWillChange:(nonnull id<VocObjSet>)objSet
			  added:(nonnull NSSet*)added
			updated:(nonnull NSSet*)updated
			removed:(nonnull NSSet*)removed
objectsAfterChanges:(nonnull NSArray*)objectsAfterChanges;

/*!
   This call back will notify the listener that there is a change on the listening object before the change is applied.

   @param added objects in the VocObjSet that got added after last notification.
   @param updated objects in the VocObjSet that got updated after last notification.
   @param removed objects in the VocObjSet that got removed after last notification.
   @param objectsBefore objects before the changes are made on the set.
  */
- (void) vocService:(nonnull id<VocService>)vocService objSetDidChange:(nonnull id<VocObjSet>)objSet
			  added:(nonnull NSSet*)added
			updated:(nonnull NSSet*)updated
			removed:(nonnull NSSet*)removed
	  objectsBefore:(nonnull NSArray*)objectsBefore;

@end


/*!
   @protocol VocObjSet

   @brief Handles a set of VocObj.

   @discussion The consumer of the SDK can retrieve a set of VocObj using query methods defined in VocService. For example: VocService::getItemWithId:completion. VocObjSet provides convenience methods to add/remove listener and track the changes on the object set.
 */
@protocol VocObjSet <NSObject>

/*! @brief Type of Object whether it is item, category or source. */
@property (readonly,nonatomic)				VOCObjType		objType;

/*! @brief Filter applied to build the object set. */
@property (readonly,nonnull,nonatomic)		VocObjFilter	*filter;

/*! @brief Consumer of the SDK can store user specific information on the object set. */
@property (readwrite,nullable,strong,nonatomic)  id			userInfo;

/*! @brief Add a VocObjSetChangeListener on the VocObjSet.

    @param listener An instance of VocObjSetChangeListener.

    @discussion Listeners are weakly referenced and if you want to get the listener callback for VocObjSet, you need to extend the life of VocObjSet through out the time you are expecting the call back.
 */
- (void)addListener:(nonnull id<VocObjSetChangeListener>)listener;

/*!
   @brief Remove a VocObjSetChangeListener added on the VocObjSet.

   @param listener An instance of VocObjSetChangeListener.
 */
- (void)removeListener:(nonnull id<VocObjSetChangeListener>)listener;

/*! @brief Remove all the VocObjSetChangeListener added on the VocObjSet. */
- (void)removeAllListeners;

@end


/*!
   @protocol VocItemSet

   @brief Handles a set of VocObj with type - VOCObjTypeItem.
 */
@protocol VocItemSet <VocObjSet>

/*! @brief Content items that belongs to this filtered VocObj set. */
@property (readonly,nonnull,nonatomic)		NSArray			*items;

@end


/*!
   @protocol VocVideoSet

   @brief Handles a set of video contents.
 */
@protocol VocVideoSet <VocObjSet>

/*! @brief Video items that belongs to this filtered VocObj set. */
@property (readonly,nonnull,nonatomic)		NSArray			*videos;

@end


/*!
   @protocol VocCategorySet

   @brief Handles a set of VocObj with type - VOCObjTypeItemCategory.
 */
@protocol VocCategorySet <VocObjSet>

/*! @brief Categories that belongs to this filtered VocObj set. */
@property (readonly,nonnull,nonatomic)		NSArray			*categories;

@end


/*!
   @protocol VocSourceSet

   @brief Handles a set of VocObj with type - VOCObjTypeItemSource.
 */
@protocol VocSourceSet <VocObjSet>

/*! @brief Sources that belongs to this filtered VocObj set. */
@property (readonly,nonnull,nonatomic)		NSArray			*sources;

@end


/*!
 @protocol VocGenericObjSet

 @brief Handles a set of VocObj of any type.
 */
@protocol VocGenericObjSet <VocObjSet>

/*! @brief Array of VocObj that belongs to VocGenericObjSet. */
@property (readonly,nonnull,nonatomic)		NSArray			*objects;

@end

#endif


